

vfs は getRealFile でjava.io.Fileになる
vfs は relativePath

templatePath
----------------------------------------------------------------
List<VirtualFile> Play.templatesPath にはこういうpathが入っている
  {application.path} /app/views
  {application.path} /modules/base-1.0-589/app/views
  $PLAY_HOME /modules/docviewer/app/views
  $PLAY_HOME /framework/templates
とりあえず1番上だけで問題なさそうだが、もしかすると2番目も考慮しないと
module側でjadeを使っている場合に問題が発生するのかもしれない


renderJadeなど、render時のjaed用のコードはいらないことがわかった
----------------------------------------------------------------
**playのrenderからの処理のながれ**
  renderXXXがよばれる
  Controller.template()などを使って、templateファイルを解決
  TemplateLoader.load(String template)
    -> TemplateLoader.load(VirtualFile file)
      -> return Play.pluginCollection.loadTemplate(file) if not null
           or  一般的なGroovyTemplateCompilerの処理
        -> pluginCollection.loadTemplate (VirtualFile) -> PlayPlugin.loadTemplate(VirtualFile)
  
     JadePlugin で 引数VirtualFileが .htmlで終わり、同じ階層に .jadeがあれば
     JadeTemplate << (BaseTemplate or Template) のインスタンスを生成するようにする予定なので
     renderXXX側ではjadeファイルを明示させない

## Reder系のコードとTemplate系のコードの境界
play.mvc.Controller.renderTemplate(String, Map<String, Object>) line:656 くらい
```
Template template = TemplateLoader.load(template(templateName));
throw new RenderTemplate(template, templateBinding.data);
```

TemplateとTemplateCompiler
===========================

GroovyTemplateCompiler
---------------------

Template |
  p name:
  p source:
    compile()
    render(Map<str,obj>)
    render(HashMap<str,obj>)
  I internalRender(Map<str,obj>) : String "out"がどうのこうの
  - どちらも render()はなかでinternalRenderを呼ぶ シグネチャ違いの真意はよく調べていない
^
|
BaseTemplate |
    
^
|
## GroovyTemplate
__constructor: super()

jade4j の挙動のめも
====================

Access By Getter
#{folder.title()} // OK 

Access to public property
#{folder.title} // OK

jade4j code reading memo
=========================

Full API  

```
JadeConfiguration config = new JadeConfiguration();
JadeTemplate template = config.getTemplate("index");

Map<String, Object> model = new HashMap<String, Object>();
model.put("company", "neuland");

config.renderTemplate(template, model);
```

JadeTemplate の作成まで
-----------------------
config.getTemplate("filename"); でtemplate を作る

jadeConfiguration.getTemplate(filename)
  -> jadeConfiguration.createTemplate(filename) // if not use cache
    -> {
      jtpl = new JadeTemplate()
      Node root = new Parser(filename, templateLoader).parsea()
      jtpl にtemplateLoader, root(Node), 各種オプション(pretty,mode) を set
      ret jtpl
    }
// --不明瞭点--
- TemplateLoader
- Parser

Parserのインスタンス作成と .parse()
-----------------------------------
** Perser の 主なproperty **
  filename : String
  templateLoader : TemplateLoader
! lexer : Lexer
! blocks : Map<String, Node>  // LinkedHashMap
  extending : Parser
! contexts : List<Parser>  // LinkedList


** __constrcutor(filename, tploader) **
  this(filename, tploder) = filename, tploder
! lexer = new Lexer(filename, tploder)
! getCcontexts().push(this)  //List<Parser> contexts に Parseインスタンス自身をpush
 
**.parse()**

! block = new BlockNode()   // BlockNode ext Node
  block .セット{ filename, lexerがいま見ている Line No. }
  while-loop   次のTokenがEOSじゃないところまで{
    when: 次のTokenがNewLine
              nextToken()
    else:
  if extending { // [要約] extending:Parser に何か入っていればあればextending:のパースをする
    コンテキスト.push(extending)
      rootNode = extending.parser() !
    コンテキスト.pop()
    Return rootNode
  return block

// --  memo --
    - (def peek() { lexer.lookahead(1) } )
    - Eos - End Of String (たぶん...)  class Eos ext Token 
      何をもってStringの終わりとしているか不明

参考になりそうなもの
====================
play.templates.TemplateLoader.load(VirtualFile)
